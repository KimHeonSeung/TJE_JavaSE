// 클래스 -> 프로그램으로 처리하고자 하는 대상에 대한 속성/기능을 정의하고 있는 '사용자 정의 자료형'

// 클래스의 작성 방법
// class 키워드를 사용하여 작성

/*
	class 클래스명(클래스이름의 첫글자는 대문자로 작성) {
		표현하고자 하는 대상의 속성...
		-(변수로 선언)
		
		표현하고자 하는 대상의 기능 ...
		-(메소드로 선언)
	}
*/	

// First 선언
class First {
	// 클래스의 내부에는 속성을 기술할 수 있다.
	// 속성 : 클래스의 정보
	// 속성은 변수로 선언하게 되면 클래스의 멤버필드라고 호칭함
	
	// 클래스의 멤버필드 선언
	// (표현하고자 하는 대상의 속성)
	int number;
	
	// 클래스의 내부에는 기능을 정의할 수 있다.
	// 기능 : 클래스가 제공할 수 있는 기능
	// 기능은 메소드로 선언하게 되고, 클래스의 멤버메소드라 호칭한다
	
	// 클래스의 멤버메소드 선언
	// (표현하고자 하는 대상의 기능)
	void showInfo() {
		// 클래스의 멤버메소드에서는 멤버필드를 자유롭게 접근할 수 있다.
		System.out.printf("number -> %d\n", number);
	}
}


public class Class_01_Define {

	public static void main(String[] args) {
		System.out.println("프로그램 시작");
		
		// 클래스의 변수 선언
		// 클래스는 사용자 정의 자료형으로 일반 자료형과 마찬가지로 변수를 생성할 수 있다.
		First f;
		
		// 클래스 타입의 변수는 레퍼런스 변수이다. (HEAP 메모리를 참조하는 변수)
		// 클래스 타입의 변수는 해당 클래스의 객체를 참조하는 변수
		// 객체 : 클래스가 실체화되어 메모리에 로딩된 상태 // 붕어빵에서 틀로부터 나와있는 실체
		// 클래스의 형태가 메모리에 로딩된 상태를 객체, 인스턴스
		// 클래스의 객체를 생성하는 방법
		// new 클래스명();
		f = new First();
		
		// 클래스의 멤버에 접근하는 방법
		// 접근연산자(.)을 사용
		f.number = 111;
		f.showInfo();
		
		System.out.println("프로그램 종료");
	}

}
