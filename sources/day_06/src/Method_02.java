
public class Method_02 {
	// 매개변수를 사용하는 메소드의 선언
	// 리턴값의 타입 메소드명 (필요한 매개변수 ...)
	
	// 메소드의 실행을 위해서 필요한 값을 전달받는 방법
	// 매개변수의 선언은 변수의 선언 방법과 동일하다.
	// 자료형 매개변수명
	// 아래의 test_1 메소드는 실행을 위해 정수타입의 값이 1개 필요한 메소드다.
	// test_1 메소드를 호출할 때 반드시 정수형의 값을 1개 전달해야만 실행할 수 있다.
	// 전달된 정수형의 값은 n변수에 대입된다.
	public static void test_1 ( int n ) {
		System.out.println("test_1 메소드 실행 ~ !");	
		System.out.printf("매개변수 n의 값은 %d 입니다.\n",n);	
	}
	
	// 매개변수가 다수개 사용되는 경우
	// 메소드명(자료형 매개변수명1, ..., 자료형 매개변수명N)
	// 주의할 점 : 동일한 타입의 매개변수가 사용되더라도 반드시 별도로 자료형을 지정해야한다.
	// 아래의 메소드는 정수형의 값 2개를 전달받아 실행되는 메소드
	public static void test_n( int n1, int n2) {
		System.out.println("test_n 메소드 실행 ~ !");	
		System.out.printf("매개변수 n1의 값은 %d 입니다.\n",n1);	
		System.out.printf("매개변수 n2의 값은 %d 입니다.\n",n2);
	}

	public static void main(String[] args) {
		System.out.println("프로그램 시작");
		
		// 매개변수가 선언된 메소드는 반드시 값을 전달해야 호출할 수 있다.
		//test_1();
		
		// 아래의 test_1 메소드를 실행할 때 전달한 10의 값은 매개변수 n에 대입되어 실행된다.
		test_1(10);
		
		// 다수개의 값을 매개변수로 전달하는 경우 매개변수의 정의 순서대로 값이 대입
		// 아래의 코드는 n1 매개변수에 100이 대입되고 n2 매개변수에 200이 대입된다.
		test_n(100,200);
		
		System.out.println("프로그램 종료");

	}

}
