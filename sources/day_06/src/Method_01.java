import java.util.Scanner;

// 메소드(Method) - 함수 (Function)
// 기능을 정의하는 단위.
// 메소드의 내부에는 실행코드들이 정의되어있음.
// 일련의 실행코드들을 묶어서 재활용할 수 있는 방법 제공

/*
	리턴값의 타입	메소드이름( 매개변수... ) {
		메소드가 호출될 때 실행할 실행코드 ...
	}
*/
// 리턴값의 타입 : 메소드의 실행 종료 후, 호출한 지점으로 반환할 값의 타입 (int, String ...)
// EX) Scanner 클래스의 nextInt() 메소드는 메소드 실행 종료 후 정수값을 반환 (int),
//					  nextDouble() 메소드는 메소드 실행 종료 후 실수값을 반환 (double)
// void 타입 : 메소드의 실행 종료 후 어떠한 값도 반환하지 않는 경우 사용되는 타입
// EX) System.out.println(); 메소드. 화면에 출력 후 어떠한 값도 반환하지 않는다. (void)

// 메소드이름 : 메소드를 실행할 때 사용되는 이름
// 변수명을 작성하는 것과 동일한 규칙이 적용
// (첫글자는 소문자로, 다수개의 단어가 조합된 경우 새로운 단어의 첫글자는 대문자로 작성한다.)

// 매개변수 : 메소드의 실행에 필요한 값을 정의하는 영역
// 각 값들은 변수의 선언을 통해서 전달받을 수 있다.
// 매개변수는 생략(없을수도 있음)할 수 있다.
// 매개변수가 사용되는 예 : println("Hello");  (소괄호 안쪽에 값이 있는 경우)
// 매개변수가 사용되지 않는 예 : Scanner 클래스의 nextInt(), nextDouble() 메소드
public class Method_01 {
	
	// 메소드의 작성 예
	// 리턴값이 없고 매개변수도 없는 test 메소드의 선언
	// test 메소드는 호출되면 실행만 하고 종료됨.
	// 메소드는 선언된 이후 호출되어야만 동작한다.
	// (메소드의 선언만으로는 어떠한 동작도 하지 않는다.)
	public static void test() {
		System.out.println("test 메소드 실행 ~ !");
		
		// 메소드의 실행 종료 후, 메소드를 호출한 지점으로 돌아가게 된다.
	}
	
	public static void main(String[] args) {
		System.out.println("프로그램 시작");
		
		// 메소드의 사용
		// 메소드를 실행하기 위해서 해당 메소드를 호출해야함.
		// 메소드의 호출방법
		// 메소드명(매개변수);
		
		// 메소드가 호출되면, 해당 메소드의 실행코드가 실행된다.
		// 메소드가 호출되면 실행의 흐름이 현재 메소드에서 호출한 메소드로 이동된다.
		// 해당 메소드의 실행이 종료된 이후 메소드를 호출한 지점으로 돌아오게 된다.
		test();
		
		System.out.println("프로그램 종료");
	}

}
